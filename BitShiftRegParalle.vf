////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : BitShiftRegParalle.vf
// /___/   /\     Timestamp : 04/20/2022 15:33:14
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family zynq -verilog "C:/Users/Megan/Documents/Classes/Comp Arch/Lab/Lab6/Lab6/BitShiftRegParalle.vf" -w "C:/Users/Megan/Documents/Classes/Comp Arch/Lab/Lab6/Lab6/BitShiftRegParalle.sch"
//Design Name: BitShiftRegParalle
//Device: zynq
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_BitShiftRegParalle (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_BitShiftRegParalle(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 1ns / 1ps

module BitShiftRegParalle(CLK, 
                          D0, 
                          D1, 
                          D2, 
                          D3, 
                          S0, 
                          S1, 
                          Q0, 
                          Q1, 
                          Q2, 
                          Q3);

    input CLK;
    input D0;
    input D1;
    input D2;
    input D3;
    input S0;
    input S1;
   output Q0;
   output Q1;
   output Q2;
   output Q3;
   
   wire XLXN_33;
   wire XLXN_34;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_76;
   wire XLXN_81;
   wire Q0_DUMMY;
   wire Q1_DUMMY;
   wire Q2_DUMMY;
   wire Q3_DUMMY;
   
   assign Q0 = Q0_DUMMY;
   assign Q1 = Q1_DUMMY;
   assign Q2 = Q2_DUMMY;
   assign Q3 = Q3_DUMMY;
   (* HU_SET = "XLXI_1_0" *) 
   FJKC_HXILINX_BitShiftRegParalle #( .INIT(1'b0) ) XLXI_1 (.C(CLK), 
                                           .CLR(XLXN_76), 
                                           .J(XLXN_40), 
                                           .K(XLXN_39), 
                                           .Q(Q0_DUMMY));
   (* HU_SET = "XLXI_2_1" *) 
   FJKC_HXILINX_BitShiftRegParalle #( .INIT(1'b0) ) XLXI_2 (.C(CLK), 
                                           .CLR(XLXN_76), 
                                           .J(XLXN_33), 
                                           .K(XLXN_38), 
                                           .Q(Q1_DUMMY));
   (* HU_SET = "XLXI_3_2" *) 
   FJKC_HXILINX_BitShiftRegParalle #( .INIT(1'b0) ) XLXI_3 (.C(CLK), 
                                           .CLR(XLXN_76), 
                                           .J(XLXN_34), 
                                           .K(XLXN_36), 
                                           .Q(Q2_DUMMY));
   (* HU_SET = "XLXI_4_3" *) 
   FJKC_HXILINX_BitShiftRegParalle #( .INIT(1'b0) ) XLXI_4 (.C(CLK), 
                                           .CLR(XLXN_76), 
                                           .J(XLXN_35), 
                                           .K(XLXN_37), 
                                           .Q(Q3_DUMMY));
   (* HU_SET = "XLXI_5_4" *) 
   M4_1E_HXILINX_BitShiftRegParalle  XLXI_5 (.D0(D0), 
                                            .D1(XLXN_81), 
                                            .D2(Q1_DUMMY), 
                                            .D3(Q0_DUMMY), 
                                            .E(XLXN_81), 
                                            .S0(S0), 
                                            .S1(S1), 
                                            .O(XLXN_40));
   (* HU_SET = "XLXI_6_5" *) 
   M4_1E_HXILINX_BitShiftRegParalle  XLXI_6 (.D0(D1), 
                                            .D1(Q0_DUMMY), 
                                            .D2(Q2_DUMMY), 
                                            .D3(Q1_DUMMY), 
                                            .E(XLXN_81), 
                                            .S0(S0), 
                                            .S1(S1), 
                                            .O(XLXN_33));
   (* HU_SET = "XLXI_7_6" *) 
   M4_1E_HXILINX_BitShiftRegParalle  XLXI_7 (.D0(D2), 
                                            .D1(Q1_DUMMY), 
                                            .D2(Q3_DUMMY), 
                                            .D3(Q2_DUMMY), 
                                            .E(XLXN_81), 
                                            .S0(S0), 
                                            .S1(S1), 
                                            .O(XLXN_34));
   (* HU_SET = "XLXI_8_7" *) 
   M4_1E_HXILINX_BitShiftRegParalle  XLXI_8 (.D0(D3), 
                                            .D1(Q2_DUMMY), 
                                            .D2(XLXN_81), 
                                            .D3(Q3_DUMMY), 
                                            .E(XLXN_81), 
                                            .S0(S0), 
                                            .S1(S1), 
                                            .O(XLXN_35));
   INV  XLXI_17 (.I(XLXN_34), 
                .O(XLXN_36));
   INV  XLXI_18 (.I(XLXN_35), 
                .O(XLXN_37));
   INV  XLXI_19 (.I(XLXN_33), 
                .O(XLXN_38));
   INV  XLXI_20 (.I(XLXN_40), 
                .O(XLXN_39));
   GND  XLXI_21 (.G(XLXN_76));
   VCC  XLXI_22 (.P(XLXN_81));
endmodule
